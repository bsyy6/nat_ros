# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from NatRosPkg/markers.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import NatRosPkg.msg
import geometry_msgs.msg

class markers(genpy.Message):
  _md5sum = "a1ca0ae52443593a08f786db6e001040"
  _type = "NatRosPkg/markers"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """int32 nMarkers
marker[] markers
================================================================================
MSG: NatRosPkg/marker
int32 ID
int32 modelID
geometry_msgs/Point position
float64 size
int16 params
float64 residual


bool oclluded 
bool PCSolved 
bool ModelSolved 
bool HasModel 
bool Unlabled 
bool ActiveMarker 
================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z
"""
  __slots__ = ['nMarkers','markers']
  _slot_types = ['int32','NatRosPkg/marker[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       nMarkers,markers

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(markers, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.nMarkers is None:
        self.nMarkers = 0
      if self.markers is None:
        self.markers = []
    else:
      self.nMarkers = 0
      self.markers = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.nMarkers
      buff.write(_get_struct_i().pack(_x))
      length = len(self.markers)
      buff.write(_struct_I.pack(length))
      for val1 in self.markers:
        _x = val1
        buff.write(_get_struct_2i().pack(_x.ID, _x.modelID))
        _v1 = val1.position
        _x = _v1
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _x = val1
        buff.write(_get_struct_dhd6B().pack(_x.size, _x.params, _x.residual, _x.oclluded, _x.PCSolved, _x.ModelSolved, _x.HasModel, _x.Unlabled, _x.ActiveMarker))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.markers is None:
        self.markers = None
      end = 0
      start = end
      end += 4
      (self.nMarkers,) = _get_struct_i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.markers = []
      for i in range(0, length):
        val1 = NatRosPkg.msg.marker()
        _x = val1
        start = end
        end += 8
        (_x.ID, _x.modelID,) = _get_struct_2i().unpack(str[start:end])
        _v2 = val1.position
        _x = _v2
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _x = val1
        start = end
        end += 24
        (_x.size, _x.params, _x.residual, _x.oclluded, _x.PCSolved, _x.ModelSolved, _x.HasModel, _x.Unlabled, _x.ActiveMarker,) = _get_struct_dhd6B().unpack(str[start:end])
        val1.oclluded = bool(val1.oclluded)
        val1.PCSolved = bool(val1.PCSolved)
        val1.ModelSolved = bool(val1.ModelSolved)
        val1.HasModel = bool(val1.HasModel)
        val1.Unlabled = bool(val1.Unlabled)
        val1.ActiveMarker = bool(val1.ActiveMarker)
        self.markers.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.nMarkers
      buff.write(_get_struct_i().pack(_x))
      length = len(self.markers)
      buff.write(_struct_I.pack(length))
      for val1 in self.markers:
        _x = val1
        buff.write(_get_struct_2i().pack(_x.ID, _x.modelID))
        _v3 = val1.position
        _x = _v3
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _x = val1
        buff.write(_get_struct_dhd6B().pack(_x.size, _x.params, _x.residual, _x.oclluded, _x.PCSolved, _x.ModelSolved, _x.HasModel, _x.Unlabled, _x.ActiveMarker))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.markers is None:
        self.markers = None
      end = 0
      start = end
      end += 4
      (self.nMarkers,) = _get_struct_i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.markers = []
      for i in range(0, length):
        val1 = NatRosPkg.msg.marker()
        _x = val1
        start = end
        end += 8
        (_x.ID, _x.modelID,) = _get_struct_2i().unpack(str[start:end])
        _v4 = val1.position
        _x = _v4
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _x = val1
        start = end
        end += 24
        (_x.size, _x.params, _x.residual, _x.oclluded, _x.PCSolved, _x.ModelSolved, _x.HasModel, _x.Unlabled, _x.ActiveMarker,) = _get_struct_dhd6B().unpack(str[start:end])
        val1.oclluded = bool(val1.oclluded)
        val1.PCSolved = bool(val1.PCSolved)
        val1.ModelSolved = bool(val1.ModelSolved)
        val1.HasModel = bool(val1.HasModel)
        val1.Unlabled = bool(val1.Unlabled)
        val1.ActiveMarker = bool(val1.ActiveMarker)
        self.markers.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2i = None
def _get_struct_2i():
    global _struct_2i
    if _struct_2i is None:
        _struct_2i = struct.Struct("<2i")
    return _struct_2i
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
_struct_dhd6B = None
def _get_struct_dhd6B():
    global _struct_dhd6B
    if _struct_dhd6B is None:
        _struct_dhd6B = struct.Struct("<dhd6B")
    return _struct_dhd6B
_struct_i = None
def _get_struct_i():
    global _struct_i
    if _struct_i is None:
        _struct_i = struct.Struct("<i")
    return _struct_i
