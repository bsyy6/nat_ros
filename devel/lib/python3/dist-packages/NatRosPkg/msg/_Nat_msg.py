# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from NatRosPkg/Nat_msg.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import NatRosPkg.msg
import geometry_msgs.msg
import std_msgs.msg

class Nat_msg(genpy.Message):
  _md5sum = "28ff3ba526904bef9489d112dfa437c3"
  _type = "NatRosPkg/Nat_msg"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """Header header

float64 Nat_server_systemLatencyMillisec
float64 Nat_server_clientLatencyMillisec
float64 Nat_server_transitLatencyMillisec

float64 Nat_server_timeStamp
string Nat_server_timeCode

int32 Nat_server_frameID

bodies bodies
skeletons skeletons
devices devices
markers markers

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: NatRosPkg/bodies
# Header header
uint8 nBodies
body[] bodies



================================================================================
MSG: NatRosPkg/body
int32 id
geometry_msgs/Pose pose
float64 meanError
bool isValid
int16 params

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of position and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

================================================================================
MSG: NatRosPkg/skeletons
int32 nSkeletons
skeleton[] skeletons
================================================================================
MSG: NatRosPkg/skeleton
string name
int32 ID
int32 nRigidBodies
body[] bodies
================================================================================
MSG: NatRosPkg/devices
int32 nDevices
device[] devices 
================================================================================
MSG: NatRosPkg/device
int32 id
int32 nChannels 
int16 params
channel[] channels
================================================================================
MSG: NatRosPkg/channel
int32 nFrames
float64[] Values
bool isEmpty
bool isPartial

================================================================================
MSG: NatRosPkg/markers
int32 nMarkers
marker[] markers
================================================================================
MSG: NatRosPkg/marker
int32 ID
int32 modelID
geometry_msgs/Point position
float64 size
int16 params
float64 residual


bool oclluded 
bool PCSolved 
bool ModelSolved 
bool HasModel 
bool Unlabled 
bool ActiveMarker """
  __slots__ = ['header','Nat_server_systemLatencyMillisec','Nat_server_clientLatencyMillisec','Nat_server_transitLatencyMillisec','Nat_server_timeStamp','Nat_server_timeCode','Nat_server_frameID','bodies','skeletons','devices','markers']
  _slot_types = ['std_msgs/Header','float64','float64','float64','float64','string','int32','NatRosPkg/bodies','NatRosPkg/skeletons','NatRosPkg/devices','NatRosPkg/markers']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,Nat_server_systemLatencyMillisec,Nat_server_clientLatencyMillisec,Nat_server_transitLatencyMillisec,Nat_server_timeStamp,Nat_server_timeCode,Nat_server_frameID,bodies,skeletons,devices,markers

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Nat_msg, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.Nat_server_systemLatencyMillisec is None:
        self.Nat_server_systemLatencyMillisec = 0.
      if self.Nat_server_clientLatencyMillisec is None:
        self.Nat_server_clientLatencyMillisec = 0.
      if self.Nat_server_transitLatencyMillisec is None:
        self.Nat_server_transitLatencyMillisec = 0.
      if self.Nat_server_timeStamp is None:
        self.Nat_server_timeStamp = 0.
      if self.Nat_server_timeCode is None:
        self.Nat_server_timeCode = ''
      if self.Nat_server_frameID is None:
        self.Nat_server_frameID = 0
      if self.bodies is None:
        self.bodies = NatRosPkg.msg.bodies()
      if self.skeletons is None:
        self.skeletons = NatRosPkg.msg.skeletons()
      if self.devices is None:
        self.devices = NatRosPkg.msg.devices()
      if self.markers is None:
        self.markers = NatRosPkg.msg.markers()
    else:
      self.header = std_msgs.msg.Header()
      self.Nat_server_systemLatencyMillisec = 0.
      self.Nat_server_clientLatencyMillisec = 0.
      self.Nat_server_transitLatencyMillisec = 0.
      self.Nat_server_timeStamp = 0.
      self.Nat_server_timeCode = ''
      self.Nat_server_frameID = 0
      self.bodies = NatRosPkg.msg.bodies()
      self.skeletons = NatRosPkg.msg.skeletons()
      self.devices = NatRosPkg.msg.devices()
      self.markers = NatRosPkg.msg.markers()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_4d().pack(_x.Nat_server_systemLatencyMillisec, _x.Nat_server_clientLatencyMillisec, _x.Nat_server_transitLatencyMillisec, _x.Nat_server_timeStamp))
      _x = self.Nat_server_timeCode
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_iB().pack(_x.Nat_server_frameID, _x.bodies.nBodies))
      length = len(self.bodies.bodies)
      buff.write(_struct_I.pack(length))
      for val1 in self.bodies.bodies:
        _x = val1.id
        buff.write(_get_struct_i().pack(_x))
        _v1 = val1.pose
        _v2 = _v1.position
        _x = _v2
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v3 = _v1.orientation
        _x = _v3
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        _x = val1
        buff.write(_get_struct_dBh().pack(_x.meanError, _x.isValid, _x.params))
      _x = self.skeletons.nSkeletons
      buff.write(_get_struct_i().pack(_x))
      length = len(self.skeletons.skeletons)
      buff.write(_struct_I.pack(length))
      for val1 in self.skeletons.skeletons:
        _x = val1.name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1
        buff.write(_get_struct_2i().pack(_x.ID, _x.nRigidBodies))
        length = len(val1.bodies)
        buff.write(_struct_I.pack(length))
        for val2 in val1.bodies:
          _x = val2.id
          buff.write(_get_struct_i().pack(_x))
          _v4 = val2.pose
          _v5 = _v4.position
          _x = _v5
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v6 = _v4.orientation
          _x = _v6
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
          _x = val2
          buff.write(_get_struct_dBh().pack(_x.meanError, _x.isValid, _x.params))
      _x = self.devices.nDevices
      buff.write(_get_struct_i().pack(_x))
      length = len(self.devices.devices)
      buff.write(_struct_I.pack(length))
      for val1 in self.devices.devices:
        _x = val1
        buff.write(_get_struct_2ih().pack(_x.id, _x.nChannels, _x.params))
        length = len(val1.channels)
        buff.write(_struct_I.pack(length))
        for val2 in val1.channels:
          _x = val2.nFrames
          buff.write(_get_struct_i().pack(_x))
          length = len(val2.Values)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.Struct(pattern).pack(*val2.Values))
          _x = val2
          buff.write(_get_struct_2B().pack(_x.isEmpty, _x.isPartial))
      _x = self.markers.nMarkers
      buff.write(_get_struct_i().pack(_x))
      length = len(self.markers.markers)
      buff.write(_struct_I.pack(length))
      for val1 in self.markers.markers:
        _x = val1
        buff.write(_get_struct_2i().pack(_x.ID, _x.modelID))
        _v7 = val1.position
        _x = _v7
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _x = val1
        buff.write(_get_struct_dhd6B().pack(_x.size, _x.params, _x.residual, _x.oclluded, _x.PCSolved, _x.ModelSolved, _x.HasModel, _x.Unlabled, _x.ActiveMarker))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.bodies is None:
        self.bodies = NatRosPkg.msg.bodies()
      if self.skeletons is None:
        self.skeletons = NatRosPkg.msg.skeletons()
      if self.devices is None:
        self.devices = NatRosPkg.msg.devices()
      if self.markers is None:
        self.markers = NatRosPkg.msg.markers()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 32
      (_x.Nat_server_systemLatencyMillisec, _x.Nat_server_clientLatencyMillisec, _x.Nat_server_transitLatencyMillisec, _x.Nat_server_timeStamp,) = _get_struct_4d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.Nat_server_timeCode = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.Nat_server_timeCode = str[start:end]
      _x = self
      start = end
      end += 5
      (_x.Nat_server_frameID, _x.bodies.nBodies,) = _get_struct_iB().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.bodies.bodies = []
      for i in range(0, length):
        val1 = NatRosPkg.msg.body()
        start = end
        end += 4
        (val1.id,) = _get_struct_i().unpack(str[start:end])
        _v8 = val1.pose
        _v9 = _v8.position
        _x = _v9
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v10 = _v8.orientation
        _x = _v10
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        _x = val1
        start = end
        end += 11
        (_x.meanError, _x.isValid, _x.params,) = _get_struct_dBh().unpack(str[start:end])
        val1.isValid = bool(val1.isValid)
        self.bodies.bodies.append(val1)
      start = end
      end += 4
      (self.skeletons.nSkeletons,) = _get_struct_i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.skeletons.skeletons = []
      for i in range(0, length):
        val1 = NatRosPkg.msg.skeleton()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.name = str[start:end]
        _x = val1
        start = end
        end += 8
        (_x.ID, _x.nRigidBodies,) = _get_struct_2i().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.bodies = []
        for i in range(0, length):
          val2 = NatRosPkg.msg.body()
          start = end
          end += 4
          (val2.id,) = _get_struct_i().unpack(str[start:end])
          _v11 = val2.pose
          _v12 = _v11.position
          _x = _v12
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v13 = _v11.orientation
          _x = _v13
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          _x = val2
          start = end
          end += 11
          (_x.meanError, _x.isValid, _x.params,) = _get_struct_dBh().unpack(str[start:end])
          val2.isValid = bool(val2.isValid)
          val1.bodies.append(val2)
        self.skeletons.skeletons.append(val1)
      start = end
      end += 4
      (self.devices.nDevices,) = _get_struct_i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.devices.devices = []
      for i in range(0, length):
        val1 = NatRosPkg.msg.device()
        _x = val1
        start = end
        end += 10
        (_x.id, _x.nChannels, _x.params,) = _get_struct_2ih().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.channels = []
        for i in range(0, length):
          val2 = NatRosPkg.msg.channel()
          start = end
          end += 4
          (val2.nFrames,) = _get_struct_i().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val2.Values = s.unpack(str[start:end])
          _x = val2
          start = end
          end += 2
          (_x.isEmpty, _x.isPartial,) = _get_struct_2B().unpack(str[start:end])
          val2.isEmpty = bool(val2.isEmpty)
          val2.isPartial = bool(val2.isPartial)
          val1.channels.append(val2)
        self.devices.devices.append(val1)
      start = end
      end += 4
      (self.markers.nMarkers,) = _get_struct_i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.markers.markers = []
      for i in range(0, length):
        val1 = NatRosPkg.msg.marker()
        _x = val1
        start = end
        end += 8
        (_x.ID, _x.modelID,) = _get_struct_2i().unpack(str[start:end])
        _v14 = val1.position
        _x = _v14
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _x = val1
        start = end
        end += 24
        (_x.size, _x.params, _x.residual, _x.oclluded, _x.PCSolved, _x.ModelSolved, _x.HasModel, _x.Unlabled, _x.ActiveMarker,) = _get_struct_dhd6B().unpack(str[start:end])
        val1.oclluded = bool(val1.oclluded)
        val1.PCSolved = bool(val1.PCSolved)
        val1.ModelSolved = bool(val1.ModelSolved)
        val1.HasModel = bool(val1.HasModel)
        val1.Unlabled = bool(val1.Unlabled)
        val1.ActiveMarker = bool(val1.ActiveMarker)
        self.markers.markers.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_4d().pack(_x.Nat_server_systemLatencyMillisec, _x.Nat_server_clientLatencyMillisec, _x.Nat_server_transitLatencyMillisec, _x.Nat_server_timeStamp))
      _x = self.Nat_server_timeCode
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_iB().pack(_x.Nat_server_frameID, _x.bodies.nBodies))
      length = len(self.bodies.bodies)
      buff.write(_struct_I.pack(length))
      for val1 in self.bodies.bodies:
        _x = val1.id
        buff.write(_get_struct_i().pack(_x))
        _v15 = val1.pose
        _v16 = _v15.position
        _x = _v16
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v17 = _v15.orientation
        _x = _v17
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        _x = val1
        buff.write(_get_struct_dBh().pack(_x.meanError, _x.isValid, _x.params))
      _x = self.skeletons.nSkeletons
      buff.write(_get_struct_i().pack(_x))
      length = len(self.skeletons.skeletons)
      buff.write(_struct_I.pack(length))
      for val1 in self.skeletons.skeletons:
        _x = val1.name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1
        buff.write(_get_struct_2i().pack(_x.ID, _x.nRigidBodies))
        length = len(val1.bodies)
        buff.write(_struct_I.pack(length))
        for val2 in val1.bodies:
          _x = val2.id
          buff.write(_get_struct_i().pack(_x))
          _v18 = val2.pose
          _v19 = _v18.position
          _x = _v19
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v20 = _v18.orientation
          _x = _v20
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
          _x = val2
          buff.write(_get_struct_dBh().pack(_x.meanError, _x.isValid, _x.params))
      _x = self.devices.nDevices
      buff.write(_get_struct_i().pack(_x))
      length = len(self.devices.devices)
      buff.write(_struct_I.pack(length))
      for val1 in self.devices.devices:
        _x = val1
        buff.write(_get_struct_2ih().pack(_x.id, _x.nChannels, _x.params))
        length = len(val1.channels)
        buff.write(_struct_I.pack(length))
        for val2 in val1.channels:
          _x = val2.nFrames
          buff.write(_get_struct_i().pack(_x))
          length = len(val2.Values)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val2.Values.tostring())
          _x = val2
          buff.write(_get_struct_2B().pack(_x.isEmpty, _x.isPartial))
      _x = self.markers.nMarkers
      buff.write(_get_struct_i().pack(_x))
      length = len(self.markers.markers)
      buff.write(_struct_I.pack(length))
      for val1 in self.markers.markers:
        _x = val1
        buff.write(_get_struct_2i().pack(_x.ID, _x.modelID))
        _v21 = val1.position
        _x = _v21
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _x = val1
        buff.write(_get_struct_dhd6B().pack(_x.size, _x.params, _x.residual, _x.oclluded, _x.PCSolved, _x.ModelSolved, _x.HasModel, _x.Unlabled, _x.ActiveMarker))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.bodies is None:
        self.bodies = NatRosPkg.msg.bodies()
      if self.skeletons is None:
        self.skeletons = NatRosPkg.msg.skeletons()
      if self.devices is None:
        self.devices = NatRosPkg.msg.devices()
      if self.markers is None:
        self.markers = NatRosPkg.msg.markers()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 32
      (_x.Nat_server_systemLatencyMillisec, _x.Nat_server_clientLatencyMillisec, _x.Nat_server_transitLatencyMillisec, _x.Nat_server_timeStamp,) = _get_struct_4d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.Nat_server_timeCode = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.Nat_server_timeCode = str[start:end]
      _x = self
      start = end
      end += 5
      (_x.Nat_server_frameID, _x.bodies.nBodies,) = _get_struct_iB().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.bodies.bodies = []
      for i in range(0, length):
        val1 = NatRosPkg.msg.body()
        start = end
        end += 4
        (val1.id,) = _get_struct_i().unpack(str[start:end])
        _v22 = val1.pose
        _v23 = _v22.position
        _x = _v23
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v24 = _v22.orientation
        _x = _v24
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        _x = val1
        start = end
        end += 11
        (_x.meanError, _x.isValid, _x.params,) = _get_struct_dBh().unpack(str[start:end])
        val1.isValid = bool(val1.isValid)
        self.bodies.bodies.append(val1)
      start = end
      end += 4
      (self.skeletons.nSkeletons,) = _get_struct_i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.skeletons.skeletons = []
      for i in range(0, length):
        val1 = NatRosPkg.msg.skeleton()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.name = str[start:end]
        _x = val1
        start = end
        end += 8
        (_x.ID, _x.nRigidBodies,) = _get_struct_2i().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.bodies = []
        for i in range(0, length):
          val2 = NatRosPkg.msg.body()
          start = end
          end += 4
          (val2.id,) = _get_struct_i().unpack(str[start:end])
          _v25 = val2.pose
          _v26 = _v25.position
          _x = _v26
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v27 = _v25.orientation
          _x = _v27
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          _x = val2
          start = end
          end += 11
          (_x.meanError, _x.isValid, _x.params,) = _get_struct_dBh().unpack(str[start:end])
          val2.isValid = bool(val2.isValid)
          val1.bodies.append(val2)
        self.skeletons.skeletons.append(val1)
      start = end
      end += 4
      (self.devices.nDevices,) = _get_struct_i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.devices.devices = []
      for i in range(0, length):
        val1 = NatRosPkg.msg.device()
        _x = val1
        start = end
        end += 10
        (_x.id, _x.nChannels, _x.params,) = _get_struct_2ih().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.channels = []
        for i in range(0, length):
          val2 = NatRosPkg.msg.channel()
          start = end
          end += 4
          (val2.nFrames,) = _get_struct_i().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val2.Values = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          _x = val2
          start = end
          end += 2
          (_x.isEmpty, _x.isPartial,) = _get_struct_2B().unpack(str[start:end])
          val2.isEmpty = bool(val2.isEmpty)
          val2.isPartial = bool(val2.isPartial)
          val1.channels.append(val2)
        self.devices.devices.append(val1)
      start = end
      end += 4
      (self.markers.nMarkers,) = _get_struct_i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.markers.markers = []
      for i in range(0, length):
        val1 = NatRosPkg.msg.marker()
        _x = val1
        start = end
        end += 8
        (_x.ID, _x.modelID,) = _get_struct_2i().unpack(str[start:end])
        _v28 = val1.position
        _x = _v28
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _x = val1
        start = end
        end += 24
        (_x.size, _x.params, _x.residual, _x.oclluded, _x.PCSolved, _x.ModelSolved, _x.HasModel, _x.Unlabled, _x.ActiveMarker,) = _get_struct_dhd6B().unpack(str[start:end])
        val1.oclluded = bool(val1.oclluded)
        val1.PCSolved = bool(val1.PCSolved)
        val1.ModelSolved = bool(val1.ModelSolved)
        val1.HasModel = bool(val1.HasModel)
        val1.Unlabled = bool(val1.Unlabled)
        val1.ActiveMarker = bool(val1.ActiveMarker)
        self.markers.markers.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2B = None
def _get_struct_2B():
    global _struct_2B
    if _struct_2B is None:
        _struct_2B = struct.Struct("<2B")
    return _struct_2B
_struct_2i = None
def _get_struct_2i():
    global _struct_2i
    if _struct_2i is None:
        _struct_2i = struct.Struct("<2i")
    return _struct_2i
_struct_2ih = None
def _get_struct_2ih():
    global _struct_2ih
    if _struct_2ih is None:
        _struct_2ih = struct.Struct("<2ih")
    return _struct_2ih
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
_struct_4d = None
def _get_struct_4d():
    global _struct_4d
    if _struct_4d is None:
        _struct_4d = struct.Struct("<4d")
    return _struct_4d
_struct_dBh = None
def _get_struct_dBh():
    global _struct_dBh
    if _struct_dBh is None:
        _struct_dBh = struct.Struct("<dBh")
    return _struct_dBh
_struct_dhd6B = None
def _get_struct_dhd6B():
    global _struct_dhd6B
    if _struct_dhd6B is None:
        _struct_dhd6B = struct.Struct("<dhd6B")
    return _struct_dhd6B
_struct_i = None
def _get_struct_i():
    global _struct_i
    if _struct_i is None:
        _struct_i = struct.Struct("<i")
    return _struct_i
_struct_iB = None
def _get_struct_iB():
    global _struct_iB
    if _struct_iB is None:
        _struct_iB = struct.Struct("<iB")
    return _struct_iB
