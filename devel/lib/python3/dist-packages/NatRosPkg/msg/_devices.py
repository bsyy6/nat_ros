# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from NatRosPkg/devices.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import NatRosPkg.msg

class devices(genpy.Message):
  _md5sum = "08d9ab4027fd2d063225bde907f29977"
  _type = "NatRosPkg/devices"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """int32 nDevices
device[] devices 
================================================================================
MSG: NatRosPkg/device
int32 id
int32 nChannels 
int16 params
channel[] channels
================================================================================
MSG: NatRosPkg/channel
int32 nFrames
float64[] Values
bool isEmpty
bool isPartial
"""
  __slots__ = ['nDevices','devices']
  _slot_types = ['int32','NatRosPkg/device[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       nDevices,devices

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(devices, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.nDevices is None:
        self.nDevices = 0
      if self.devices is None:
        self.devices = []
    else:
      self.nDevices = 0
      self.devices = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.nDevices
      buff.write(_get_struct_i().pack(_x))
      length = len(self.devices)
      buff.write(_struct_I.pack(length))
      for val1 in self.devices:
        _x = val1
        buff.write(_get_struct_2ih().pack(_x.id, _x.nChannels, _x.params))
        length = len(val1.channels)
        buff.write(_struct_I.pack(length))
        for val2 in val1.channels:
          _x = val2.nFrames
          buff.write(_get_struct_i().pack(_x))
          length = len(val2.Values)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.Struct(pattern).pack(*val2.Values))
          _x = val2
          buff.write(_get_struct_2B().pack(_x.isEmpty, _x.isPartial))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.devices is None:
        self.devices = None
      end = 0
      start = end
      end += 4
      (self.nDevices,) = _get_struct_i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.devices = []
      for i in range(0, length):
        val1 = NatRosPkg.msg.device()
        _x = val1
        start = end
        end += 10
        (_x.id, _x.nChannels, _x.params,) = _get_struct_2ih().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.channels = []
        for i in range(0, length):
          val2 = NatRosPkg.msg.channel()
          start = end
          end += 4
          (val2.nFrames,) = _get_struct_i().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val2.Values = s.unpack(str[start:end])
          _x = val2
          start = end
          end += 2
          (_x.isEmpty, _x.isPartial,) = _get_struct_2B().unpack(str[start:end])
          val2.isEmpty = bool(val2.isEmpty)
          val2.isPartial = bool(val2.isPartial)
          val1.channels.append(val2)
        self.devices.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.nDevices
      buff.write(_get_struct_i().pack(_x))
      length = len(self.devices)
      buff.write(_struct_I.pack(length))
      for val1 in self.devices:
        _x = val1
        buff.write(_get_struct_2ih().pack(_x.id, _x.nChannels, _x.params))
        length = len(val1.channels)
        buff.write(_struct_I.pack(length))
        for val2 in val1.channels:
          _x = val2.nFrames
          buff.write(_get_struct_i().pack(_x))
          length = len(val2.Values)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val2.Values.tostring())
          _x = val2
          buff.write(_get_struct_2B().pack(_x.isEmpty, _x.isPartial))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.devices is None:
        self.devices = None
      end = 0
      start = end
      end += 4
      (self.nDevices,) = _get_struct_i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.devices = []
      for i in range(0, length):
        val1 = NatRosPkg.msg.device()
        _x = val1
        start = end
        end += 10
        (_x.id, _x.nChannels, _x.params,) = _get_struct_2ih().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.channels = []
        for i in range(0, length):
          val2 = NatRosPkg.msg.channel()
          start = end
          end += 4
          (val2.nFrames,) = _get_struct_i().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val2.Values = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          _x = val2
          start = end
          end += 2
          (_x.isEmpty, _x.isPartial,) = _get_struct_2B().unpack(str[start:end])
          val2.isEmpty = bool(val2.isEmpty)
          val2.isPartial = bool(val2.isPartial)
          val1.channels.append(val2)
        self.devices.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2B = None
def _get_struct_2B():
    global _struct_2B
    if _struct_2B is None:
        _struct_2B = struct.Struct("<2B")
    return _struct_2B
_struct_2ih = None
def _get_struct_2ih():
    global _struct_2ih
    if _struct_2ih is None:
        _struct_2ih = struct.Struct("<2ih")
    return _struct_2ih
_struct_i = None
def _get_struct_i():
    global _struct_i
    if _struct_i is None:
        _struct_i = struct.Struct("<i")
    return _struct_i
