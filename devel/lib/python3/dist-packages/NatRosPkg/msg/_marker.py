# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from NatRosPkg/marker.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg

class marker(genpy.Message):
  _md5sum = "1cc80e06d1d63fc9aa98d6e8f0d4490d"
  _type = "NatRosPkg/marker"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """int32 ID
int32 modelID
geometry_msgs/Point position
float64 size
int16 params
float64 residual


bool oclluded 
bool PCSolved 
bool ModelSolved 
bool HasModel 
bool Unlabled 
bool ActiveMarker 
================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z
"""
  __slots__ = ['ID','modelID','position','size','params','residual','oclluded','PCSolved','ModelSolved','HasModel','Unlabled','ActiveMarker']
  _slot_types = ['int32','int32','geometry_msgs/Point','float64','int16','float64','bool','bool','bool','bool','bool','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       ID,modelID,position,size,params,residual,oclluded,PCSolved,ModelSolved,HasModel,Unlabled,ActiveMarker

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(marker, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.ID is None:
        self.ID = 0
      if self.modelID is None:
        self.modelID = 0
      if self.position is None:
        self.position = geometry_msgs.msg.Point()
      if self.size is None:
        self.size = 0.
      if self.params is None:
        self.params = 0
      if self.residual is None:
        self.residual = 0.
      if self.oclluded is None:
        self.oclluded = False
      if self.PCSolved is None:
        self.PCSolved = False
      if self.ModelSolved is None:
        self.ModelSolved = False
      if self.HasModel is None:
        self.HasModel = False
      if self.Unlabled is None:
        self.Unlabled = False
      if self.ActiveMarker is None:
        self.ActiveMarker = False
    else:
      self.ID = 0
      self.modelID = 0
      self.position = geometry_msgs.msg.Point()
      self.size = 0.
      self.params = 0
      self.residual = 0.
      self.oclluded = False
      self.PCSolved = False
      self.ModelSolved = False
      self.HasModel = False
      self.Unlabled = False
      self.ActiveMarker = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2i4dhd6B().pack(_x.ID, _x.modelID, _x.position.x, _x.position.y, _x.position.z, _x.size, _x.params, _x.residual, _x.oclluded, _x.PCSolved, _x.ModelSolved, _x.HasModel, _x.Unlabled, _x.ActiveMarker))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.position is None:
        self.position = geometry_msgs.msg.Point()
      end = 0
      _x = self
      start = end
      end += 56
      (_x.ID, _x.modelID, _x.position.x, _x.position.y, _x.position.z, _x.size, _x.params, _x.residual, _x.oclluded, _x.PCSolved, _x.ModelSolved, _x.HasModel, _x.Unlabled, _x.ActiveMarker,) = _get_struct_2i4dhd6B().unpack(str[start:end])
      self.oclluded = bool(self.oclluded)
      self.PCSolved = bool(self.PCSolved)
      self.ModelSolved = bool(self.ModelSolved)
      self.HasModel = bool(self.HasModel)
      self.Unlabled = bool(self.Unlabled)
      self.ActiveMarker = bool(self.ActiveMarker)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2i4dhd6B().pack(_x.ID, _x.modelID, _x.position.x, _x.position.y, _x.position.z, _x.size, _x.params, _x.residual, _x.oclluded, _x.PCSolved, _x.ModelSolved, _x.HasModel, _x.Unlabled, _x.ActiveMarker))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.position is None:
        self.position = geometry_msgs.msg.Point()
      end = 0
      _x = self
      start = end
      end += 56
      (_x.ID, _x.modelID, _x.position.x, _x.position.y, _x.position.z, _x.size, _x.params, _x.residual, _x.oclluded, _x.PCSolved, _x.ModelSolved, _x.HasModel, _x.Unlabled, _x.ActiveMarker,) = _get_struct_2i4dhd6B().unpack(str[start:end])
      self.oclluded = bool(self.oclluded)
      self.PCSolved = bool(self.PCSolved)
      self.ModelSolved = bool(self.ModelSolved)
      self.HasModel = bool(self.HasModel)
      self.Unlabled = bool(self.Unlabled)
      self.ActiveMarker = bool(self.ActiveMarker)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2i4dhd6B = None
def _get_struct_2i4dhd6B():
    global _struct_2i4dhd6B
    if _struct_2i4dhd6B is None:
        _struct_2i4dhd6B = struct.Struct("<2i4dhd6B")
    return _struct_2i4dhd6B
