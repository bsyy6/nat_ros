// Generated by gencpp from file NatRosPkg/bodies.msg
// DO NOT EDIT!


#ifndef NATROSPKG_MESSAGE_BODIES_H
#define NATROSPKG_MESSAGE_BODIES_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <NatRosPkg/body.h>

namespace NatRosPkg
{
template <class ContainerAllocator>
struct bodies_
{
  typedef bodies_<ContainerAllocator> Type;

  bodies_()
    : nBodies(0)
    , bodies()  {
    }
  bodies_(const ContainerAllocator& _alloc)
    : nBodies(0)
    , bodies(_alloc)  {
  (void)_alloc;
    }



   typedef uint8_t _nBodies_type;
  _nBodies_type nBodies;

   typedef std::vector< ::NatRosPkg::body_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::NatRosPkg::body_<ContainerAllocator> >> _bodies_type;
  _bodies_type bodies;





  typedef boost::shared_ptr< ::NatRosPkg::bodies_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::NatRosPkg::bodies_<ContainerAllocator> const> ConstPtr;

}; // struct bodies_

typedef ::NatRosPkg::bodies_<std::allocator<void> > bodies;

typedef boost::shared_ptr< ::NatRosPkg::bodies > bodiesPtr;
typedef boost::shared_ptr< ::NatRosPkg::bodies const> bodiesConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::NatRosPkg::bodies_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::NatRosPkg::bodies_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::NatRosPkg::bodies_<ContainerAllocator1> & lhs, const ::NatRosPkg::bodies_<ContainerAllocator2> & rhs)
{
  return lhs.nBodies == rhs.nBodies &&
    lhs.bodies == rhs.bodies;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::NatRosPkg::bodies_<ContainerAllocator1> & lhs, const ::NatRosPkg::bodies_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace NatRosPkg

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::NatRosPkg::bodies_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::NatRosPkg::bodies_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::NatRosPkg::bodies_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::NatRosPkg::bodies_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::NatRosPkg::bodies_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::NatRosPkg::bodies_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::NatRosPkg::bodies_<ContainerAllocator> >
{
  static const char* value()
  {
    return "11f3573350a1db22abb9f03f08ef9e79";
  }

  static const char* value(const ::NatRosPkg::bodies_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x11f3573350a1db22ULL;
  static const uint64_t static_value2 = 0xabb9f03f08ef9e79ULL;
};

template<class ContainerAllocator>
struct DataType< ::NatRosPkg::bodies_<ContainerAllocator> >
{
  static const char* value()
  {
    return "NatRosPkg/bodies";
  }

  static const char* value(const ::NatRosPkg::bodies_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::NatRosPkg::bodies_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Header header\n"
"uint8 nBodies\n"
"body[] bodies\n"
"\n"
"\n"
"\n"
"================================================================================\n"
"MSG: NatRosPkg/body\n"
"int32 id\n"
"geometry_msgs/Pose pose\n"
"float64 meanError\n"
"bool isValid\n"
"int16 params\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
;
  }

  static const char* value(const ::NatRosPkg::bodies_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::NatRosPkg::bodies_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.nBodies);
      stream.next(m.bodies);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct bodies_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::NatRosPkg::bodies_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::NatRosPkg::bodies_<ContainerAllocator>& v)
  {
    s << indent << "nBodies: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.nBodies);
    s << indent << "bodies[]" << std::endl;
    for (size_t i = 0; i < v.bodies.size(); ++i)
    {
      s << indent << "  bodies[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::NatRosPkg::body_<ContainerAllocator> >::stream(s, indent + "    ", v.bodies[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // NATROSPKG_MESSAGE_BODIES_H
