// Generated by gencpp from file NatRosPkg/channel.msg
// DO NOT EDIT!


#ifndef NATROSPKG_MESSAGE_CHANNEL_H
#define NATROSPKG_MESSAGE_CHANNEL_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace NatRosPkg
{
template <class ContainerAllocator>
struct channel_
{
  typedef channel_<ContainerAllocator> Type;

  channel_()
    : nFrames(0)
    , Values()
    , isEmpty(false)
    , isPartial(false)  {
    }
  channel_(const ContainerAllocator& _alloc)
    : nFrames(0)
    , Values(_alloc)
    , isEmpty(false)
    , isPartial(false)  {
  (void)_alloc;
    }



   typedef int32_t _nFrames_type;
  _nFrames_type nFrames;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _Values_type;
  _Values_type Values;

   typedef uint8_t _isEmpty_type;
  _isEmpty_type isEmpty;

   typedef uint8_t _isPartial_type;
  _isPartial_type isPartial;





  typedef boost::shared_ptr< ::NatRosPkg::channel_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::NatRosPkg::channel_<ContainerAllocator> const> ConstPtr;

}; // struct channel_

typedef ::NatRosPkg::channel_<std::allocator<void> > channel;

typedef boost::shared_ptr< ::NatRosPkg::channel > channelPtr;
typedef boost::shared_ptr< ::NatRosPkg::channel const> channelConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::NatRosPkg::channel_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::NatRosPkg::channel_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::NatRosPkg::channel_<ContainerAllocator1> & lhs, const ::NatRosPkg::channel_<ContainerAllocator2> & rhs)
{
  return lhs.nFrames == rhs.nFrames &&
    lhs.Values == rhs.Values &&
    lhs.isEmpty == rhs.isEmpty &&
    lhs.isPartial == rhs.isPartial;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::NatRosPkg::channel_<ContainerAllocator1> & lhs, const ::NatRosPkg::channel_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace NatRosPkg

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::NatRosPkg::channel_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::NatRosPkg::channel_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::NatRosPkg::channel_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::NatRosPkg::channel_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::NatRosPkg::channel_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::NatRosPkg::channel_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::NatRosPkg::channel_<ContainerAllocator> >
{
  static const char* value()
  {
    return "3fa6a6187541c2c904521c296745a24b";
  }

  static const char* value(const ::NatRosPkg::channel_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x3fa6a6187541c2c9ULL;
  static const uint64_t static_value2 = 0x04521c296745a24bULL;
};

template<class ContainerAllocator>
struct DataType< ::NatRosPkg::channel_<ContainerAllocator> >
{
  static const char* value()
  {
    return "NatRosPkg/channel";
  }

  static const char* value(const ::NatRosPkg::channel_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::NatRosPkg::channel_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 nFrames\n"
"float64[] Values\n"
"bool isEmpty\n"
"bool isPartial\n"
;
  }

  static const char* value(const ::NatRosPkg::channel_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::NatRosPkg::channel_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.nFrames);
      stream.next(m.Values);
      stream.next(m.isEmpty);
      stream.next(m.isPartial);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct channel_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::NatRosPkg::channel_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::NatRosPkg::channel_<ContainerAllocator>& v)
  {
    s << indent << "nFrames: ";
    Printer<int32_t>::stream(s, indent + "  ", v.nFrames);
    s << indent << "Values[]" << std::endl;
    for (size_t i = 0; i < v.Values.size(); ++i)
    {
      s << indent << "  Values[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.Values[i]);
    }
    s << indent << "isEmpty: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.isEmpty);
    s << indent << "isPartial: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.isPartial);
  }
};

} // namespace message_operations
} // namespace ros

#endif // NATROSPKG_MESSAGE_CHANNEL_H
