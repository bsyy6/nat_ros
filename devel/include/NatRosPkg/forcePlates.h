// Generated by gencpp from file NatRosPkg/forcePlates.msg
// DO NOT EDIT!


#ifndef NATROSPKG_MESSAGE_FORCEPLATES_H
#define NATROSPKG_MESSAGE_FORCEPLATES_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <NatRosPkg/forcePlate.h>

namespace NatRosPkg
{
template <class ContainerAllocator>
struct forcePlates_
{
  typedef forcePlates_<ContainerAllocator> Type;

  forcePlates_()
    : nForcePlates(0)
    , forcePlates()  {
    }
  forcePlates_(const ContainerAllocator& _alloc)
    : nForcePlates(0)
    , forcePlates(_alloc)  {
  (void)_alloc;
    }



   typedef int32_t _nForcePlates_type;
  _nForcePlates_type nForcePlates;

   typedef std::vector< ::NatRosPkg::forcePlate_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::NatRosPkg::forcePlate_<ContainerAllocator> >> _forcePlates_type;
  _forcePlates_type forcePlates;





  typedef boost::shared_ptr< ::NatRosPkg::forcePlates_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::NatRosPkg::forcePlates_<ContainerAllocator> const> ConstPtr;

}; // struct forcePlates_

typedef ::NatRosPkg::forcePlates_<std::allocator<void> > forcePlates;

typedef boost::shared_ptr< ::NatRosPkg::forcePlates > forcePlatesPtr;
typedef boost::shared_ptr< ::NatRosPkg::forcePlates const> forcePlatesConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::NatRosPkg::forcePlates_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::NatRosPkg::forcePlates_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::NatRosPkg::forcePlates_<ContainerAllocator1> & lhs, const ::NatRosPkg::forcePlates_<ContainerAllocator2> & rhs)
{
  return lhs.nForcePlates == rhs.nForcePlates &&
    lhs.forcePlates == rhs.forcePlates;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::NatRosPkg::forcePlates_<ContainerAllocator1> & lhs, const ::NatRosPkg::forcePlates_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace NatRosPkg

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::NatRosPkg::forcePlates_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::NatRosPkg::forcePlates_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::NatRosPkg::forcePlates_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::NatRosPkg::forcePlates_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::NatRosPkg::forcePlates_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::NatRosPkg::forcePlates_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::NatRosPkg::forcePlates_<ContainerAllocator> >
{
  static const char* value()
  {
    return "9e2204891ff75e6f356bdd61d2c32647";
  }

  static const char* value(const ::NatRosPkg::forcePlates_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x9e2204891ff75e6fULL;
  static const uint64_t static_value2 = 0x356bdd61d2c32647ULL;
};

template<class ContainerAllocator>
struct DataType< ::NatRosPkg::forcePlates_<ContainerAllocator> >
{
  static const char* value()
  {
    return "NatRosPkg/forcePlates";
  }

  static const char* value(const ::NatRosPkg::forcePlates_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::NatRosPkg::forcePlates_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 nForcePlates\n"
"forcePlate[] forcePlates\n"
"================================================================================\n"
"MSG: NatRosPkg/forcePlate\n"
"int32 id\n"
"int32 nChannels \n"
"int16 params\n"
"channel[] channels\n"
"================================================================================\n"
"MSG: NatRosPkg/channel\n"
"int32 nFrames\n"
"float64[] Values\n"
"bool isEmpty\n"
"bool isPartial\n"
;
  }

  static const char* value(const ::NatRosPkg::forcePlates_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::NatRosPkg::forcePlates_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.nForcePlates);
      stream.next(m.forcePlates);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct forcePlates_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::NatRosPkg::forcePlates_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::NatRosPkg::forcePlates_<ContainerAllocator>& v)
  {
    s << indent << "nForcePlates: ";
    Printer<int32_t>::stream(s, indent + "  ", v.nForcePlates);
    s << indent << "forcePlates[]" << std::endl;
    for (size_t i = 0; i < v.forcePlates.size(); ++i)
    {
      s << indent << "  forcePlates[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::NatRosPkg::forcePlate_<ContainerAllocator> >::stream(s, indent + "    ", v.forcePlates[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // NATROSPKG_MESSAGE_FORCEPLATES_H
