// Generated by gencpp from file NatRosPkg/Nat_msg.msg
// DO NOT EDIT!


#ifndef NATROSPKG_MESSAGE_NAT_MSG_H
#define NATROSPKG_MESSAGE_NAT_MSG_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <NatRosPkg/markers.h>
#include <NatRosPkg/bodies.h>
#include <NatRosPkg/skeletons.h>
#include <NatRosPkg/devices.h>
#include <NatRosPkg/devices.h>

namespace NatRosPkg
{
template <class ContainerAllocator>
struct Nat_msg_
{
  typedef Nat_msg_<ContainerAllocator> Type;

  Nat_msg_()
    : header()
    , Nat_server_systemLatencyMillisec(0.0)
    , Nat_server_clientLatencyMillisec(0.0)
    , Nat_server_transitLatencyMillisec(0.0)
    , Nat_server_timeStamp(0.0)
    , Nat_server_timeCode()
    , Nat_server_frameID(0)
    , markers()
    , bodies()
    , skeletons()
    , devices()
    , forcePlates()  {
    }
  Nat_msg_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , Nat_server_systemLatencyMillisec(0.0)
    , Nat_server_clientLatencyMillisec(0.0)
    , Nat_server_transitLatencyMillisec(0.0)
    , Nat_server_timeStamp(0.0)
    , Nat_server_timeCode(_alloc)
    , Nat_server_frameID(0)
    , markers(_alloc)
    , bodies(_alloc)
    , skeletons(_alloc)
    , devices(_alloc)
    , forcePlates(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef double _Nat_server_systemLatencyMillisec_type;
  _Nat_server_systemLatencyMillisec_type Nat_server_systemLatencyMillisec;

   typedef double _Nat_server_clientLatencyMillisec_type;
  _Nat_server_clientLatencyMillisec_type Nat_server_clientLatencyMillisec;

   typedef double _Nat_server_transitLatencyMillisec_type;
  _Nat_server_transitLatencyMillisec_type Nat_server_transitLatencyMillisec;

   typedef double _Nat_server_timeStamp_type;
  _Nat_server_timeStamp_type Nat_server_timeStamp;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _Nat_server_timeCode_type;
  _Nat_server_timeCode_type Nat_server_timeCode;

   typedef int32_t _Nat_server_frameID_type;
  _Nat_server_frameID_type Nat_server_frameID;

   typedef  ::NatRosPkg::markers_<ContainerAllocator>  _markers_type;
  _markers_type markers;

   typedef  ::NatRosPkg::bodies_<ContainerAllocator>  _bodies_type;
  _bodies_type bodies;

   typedef  ::NatRosPkg::skeletons_<ContainerAllocator>  _skeletons_type;
  _skeletons_type skeletons;

   typedef  ::NatRosPkg::devices_<ContainerAllocator>  _devices_type;
  _devices_type devices;

   typedef  ::NatRosPkg::devices_<ContainerAllocator>  _forcePlates_type;
  _forcePlates_type forcePlates;





  typedef boost::shared_ptr< ::NatRosPkg::Nat_msg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::NatRosPkg::Nat_msg_<ContainerAllocator> const> ConstPtr;

}; // struct Nat_msg_

typedef ::NatRosPkg::Nat_msg_<std::allocator<void> > Nat_msg;

typedef boost::shared_ptr< ::NatRosPkg::Nat_msg > Nat_msgPtr;
typedef boost::shared_ptr< ::NatRosPkg::Nat_msg const> Nat_msgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::NatRosPkg::Nat_msg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::NatRosPkg::Nat_msg_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::NatRosPkg::Nat_msg_<ContainerAllocator1> & lhs, const ::NatRosPkg::Nat_msg_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.Nat_server_systemLatencyMillisec == rhs.Nat_server_systemLatencyMillisec &&
    lhs.Nat_server_clientLatencyMillisec == rhs.Nat_server_clientLatencyMillisec &&
    lhs.Nat_server_transitLatencyMillisec == rhs.Nat_server_transitLatencyMillisec &&
    lhs.Nat_server_timeStamp == rhs.Nat_server_timeStamp &&
    lhs.Nat_server_timeCode == rhs.Nat_server_timeCode &&
    lhs.Nat_server_frameID == rhs.Nat_server_frameID &&
    lhs.markers == rhs.markers &&
    lhs.bodies == rhs.bodies &&
    lhs.skeletons == rhs.skeletons &&
    lhs.devices == rhs.devices &&
    lhs.forcePlates == rhs.forcePlates;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::NatRosPkg::Nat_msg_<ContainerAllocator1> & lhs, const ::NatRosPkg::Nat_msg_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace NatRosPkg

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::NatRosPkg::Nat_msg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::NatRosPkg::Nat_msg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::NatRosPkg::Nat_msg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::NatRosPkg::Nat_msg_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::NatRosPkg::Nat_msg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::NatRosPkg::Nat_msg_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::NatRosPkg::Nat_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "9aee2c807a0b367d51433da0cfa4687e";
  }

  static const char* value(const ::NatRosPkg::Nat_msg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x9aee2c807a0b367dULL;
  static const uint64_t static_value2 = 0x51433da0cfa4687eULL;
};

template<class ContainerAllocator>
struct DataType< ::NatRosPkg::Nat_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "NatRosPkg/Nat_msg";
  }

  static const char* value(const ::NatRosPkg::Nat_msg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::NatRosPkg::Nat_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"\n"
"float64 Nat_server_systemLatencyMillisec\n"
"float64 Nat_server_clientLatencyMillisec\n"
"float64 Nat_server_transitLatencyMillisec\n"
"\n"
"float64 Nat_server_timeStamp\n"
"string Nat_server_timeCode\n"
"\n"
"int32 Nat_server_frameID\n"
"\n"
"markers markers\n"
"bodies bodies\n"
"skeletons skeletons\n"
"devices devices\n"
"devices forcePlates\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: NatRosPkg/markers\n"
"int32 nMarkers\n"
"marker[] markers\n"
"================================================================================\n"
"MSG: NatRosPkg/marker\n"
"int32 ID\n"
"int32 modelID\n"
"geometry_msgs/Point position\n"
"float64 size\n"
"int16 params\n"
"float64 residual\n"
"\n"
"\n"
"bool oclluded \n"
"bool PCSolved \n"
"bool ModelSolved \n"
"bool HasModel \n"
"bool Unlabled \n"
"bool ActiveMarker \n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: NatRosPkg/bodies\n"
"# Header header\n"
"uint8 nBodies\n"
"body[] bodies\n"
"\n"
"\n"
"\n"
"================================================================================\n"
"MSG: NatRosPkg/body\n"
"int32 id\n"
"geometry_msgs/Pose pose\n"
"float64 meanError\n"
"bool isValid\n"
"int16 params\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
"\n"
"================================================================================\n"
"MSG: NatRosPkg/skeletons\n"
"int32 nSkeletons\n"
"skeleton[] skeletons\n"
"================================================================================\n"
"MSG: NatRosPkg/skeleton\n"
"string name\n"
"int32 ID\n"
"int32 nRigidBodies\n"
"body[] bodies\n"
"================================================================================\n"
"MSG: NatRosPkg/devices\n"
"int32 nDevices\n"
"device[] devices \n"
"================================================================================\n"
"MSG: NatRosPkg/device\n"
"int32 id\n"
"int32 nChannels \n"
"int16 params\n"
"channel[] channels\n"
"================================================================================\n"
"MSG: NatRosPkg/channel\n"
"int32 nFrames\n"
"float64[] Values\n"
"bool isEmpty\n"
"bool isPartial\n"
;
  }

  static const char* value(const ::NatRosPkg::Nat_msg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::NatRosPkg::Nat_msg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.Nat_server_systemLatencyMillisec);
      stream.next(m.Nat_server_clientLatencyMillisec);
      stream.next(m.Nat_server_transitLatencyMillisec);
      stream.next(m.Nat_server_timeStamp);
      stream.next(m.Nat_server_timeCode);
      stream.next(m.Nat_server_frameID);
      stream.next(m.markers);
      stream.next(m.bodies);
      stream.next(m.skeletons);
      stream.next(m.devices);
      stream.next(m.forcePlates);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Nat_msg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::NatRosPkg::Nat_msg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::NatRosPkg::Nat_msg_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "Nat_server_systemLatencyMillisec: ";
    Printer<double>::stream(s, indent + "  ", v.Nat_server_systemLatencyMillisec);
    s << indent << "Nat_server_clientLatencyMillisec: ";
    Printer<double>::stream(s, indent + "  ", v.Nat_server_clientLatencyMillisec);
    s << indent << "Nat_server_transitLatencyMillisec: ";
    Printer<double>::stream(s, indent + "  ", v.Nat_server_transitLatencyMillisec);
    s << indent << "Nat_server_timeStamp: ";
    Printer<double>::stream(s, indent + "  ", v.Nat_server_timeStamp);
    s << indent << "Nat_server_timeCode: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.Nat_server_timeCode);
    s << indent << "Nat_server_frameID: ";
    Printer<int32_t>::stream(s, indent + "  ", v.Nat_server_frameID);
    s << indent << "markers: ";
    s << std::endl;
    Printer< ::NatRosPkg::markers_<ContainerAllocator> >::stream(s, indent + "  ", v.markers);
    s << indent << "bodies: ";
    s << std::endl;
    Printer< ::NatRosPkg::bodies_<ContainerAllocator> >::stream(s, indent + "  ", v.bodies);
    s << indent << "skeletons: ";
    s << std::endl;
    Printer< ::NatRosPkg::skeletons_<ContainerAllocator> >::stream(s, indent + "  ", v.skeletons);
    s << indent << "devices: ";
    s << std::endl;
    Printer< ::NatRosPkg::devices_<ContainerAllocator> >::stream(s, indent + "  ", v.devices);
    s << indent << "forcePlates: ";
    s << std::endl;
    Printer< ::NatRosPkg::devices_<ContainerAllocator> >::stream(s, indent + "  ", v.forcePlates);
  }
};

} // namespace message_operations
} // namespace ros

#endif // NATROSPKG_MESSAGE_NAT_MSG_H
