// Generated by gencpp from file NatRosPkg/skeleton.msg
// DO NOT EDIT!


#ifndef NATROSPKG_MESSAGE_SKELETON_H
#define NATROSPKG_MESSAGE_SKELETON_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <NatRosPkg/body.h>

namespace NatRosPkg
{
template <class ContainerAllocator>
struct skeleton_
{
  typedef skeleton_<ContainerAllocator> Type;

  skeleton_()
    : name()
    , ID(0)
    , nRigidBodies(0)
    , bodies()  {
    }
  skeleton_(const ContainerAllocator& _alloc)
    : name(_alloc)
    , ID(0)
    , nRigidBodies(0)
    , bodies(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _name_type;
  _name_type name;

   typedef int32_t _ID_type;
  _ID_type ID;

   typedef int32_t _nRigidBodies_type;
  _nRigidBodies_type nRigidBodies;

   typedef std::vector< ::NatRosPkg::body_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::NatRosPkg::body_<ContainerAllocator> >> _bodies_type;
  _bodies_type bodies;





  typedef boost::shared_ptr< ::NatRosPkg::skeleton_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::NatRosPkg::skeleton_<ContainerAllocator> const> ConstPtr;

}; // struct skeleton_

typedef ::NatRosPkg::skeleton_<std::allocator<void> > skeleton;

typedef boost::shared_ptr< ::NatRosPkg::skeleton > skeletonPtr;
typedef boost::shared_ptr< ::NatRosPkg::skeleton const> skeletonConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::NatRosPkg::skeleton_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::NatRosPkg::skeleton_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::NatRosPkg::skeleton_<ContainerAllocator1> & lhs, const ::NatRosPkg::skeleton_<ContainerAllocator2> & rhs)
{
  return lhs.name == rhs.name &&
    lhs.ID == rhs.ID &&
    lhs.nRigidBodies == rhs.nRigidBodies &&
    lhs.bodies == rhs.bodies;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::NatRosPkg::skeleton_<ContainerAllocator1> & lhs, const ::NatRosPkg::skeleton_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace NatRosPkg

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::NatRosPkg::skeleton_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::NatRosPkg::skeleton_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::NatRosPkg::skeleton_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::NatRosPkg::skeleton_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::NatRosPkg::skeleton_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::NatRosPkg::skeleton_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::NatRosPkg::skeleton_<ContainerAllocator> >
{
  static const char* value()
  {
    return "73a2dfd70dd6f12dc399c5f89d405659";
  }

  static const char* value(const ::NatRosPkg::skeleton_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x73a2dfd70dd6f12dULL;
  static const uint64_t static_value2 = 0xc399c5f89d405659ULL;
};

template<class ContainerAllocator>
struct DataType< ::NatRosPkg::skeleton_<ContainerAllocator> >
{
  static const char* value()
  {
    return "NatRosPkg/skeleton";
  }

  static const char* value(const ::NatRosPkg::skeleton_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::NatRosPkg::skeleton_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string name\n"
"int32 ID\n"
"int32 nRigidBodies\n"
"body[] bodies\n"
"================================================================================\n"
"MSG: NatRosPkg/body\n"
"int32 id\n"
"geometry_msgs/Pose pose\n"
"float64 meanError\n"
"bool isValid\n"
"int16 params\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
;
  }

  static const char* value(const ::NatRosPkg::skeleton_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::NatRosPkg::skeleton_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.name);
      stream.next(m.ID);
      stream.next(m.nRigidBodies);
      stream.next(m.bodies);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct skeleton_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::NatRosPkg::skeleton_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::NatRosPkg::skeleton_<ContainerAllocator>& v)
  {
    s << indent << "name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.name);
    s << indent << "ID: ";
    Printer<int32_t>::stream(s, indent + "  ", v.ID);
    s << indent << "nRigidBodies: ";
    Printer<int32_t>::stream(s, indent + "  ", v.nRigidBodies);
    s << indent << "bodies[]" << std::endl;
    for (size_t i = 0; i < v.bodies.size(); ++i)
    {
      s << indent << "  bodies[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::NatRosPkg::body_<ContainerAllocator> >::stream(s, indent + "    ", v.bodies[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // NATROSPKG_MESSAGE_SKELETON_H
