// Generated by gencpp from file NatRosPkg/devices.msg
// DO NOT EDIT!


#ifndef NATROSPKG_MESSAGE_DEVICES_H
#define NATROSPKG_MESSAGE_DEVICES_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <NatRosPkg/device.h>

namespace NatRosPkg
{
template <class ContainerAllocator>
struct devices_
{
  typedef devices_<ContainerAllocator> Type;

  devices_()
    : nDevices(0)
    , devices()  {
    }
  devices_(const ContainerAllocator& _alloc)
    : nDevices(0)
    , devices(_alloc)  {
  (void)_alloc;
    }



   typedef int32_t _nDevices_type;
  _nDevices_type nDevices;

   typedef std::vector< ::NatRosPkg::device_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::NatRosPkg::device_<ContainerAllocator> >> _devices_type;
  _devices_type devices;





  typedef boost::shared_ptr< ::NatRosPkg::devices_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::NatRosPkg::devices_<ContainerAllocator> const> ConstPtr;

}; // struct devices_

typedef ::NatRosPkg::devices_<std::allocator<void> > devices;

typedef boost::shared_ptr< ::NatRosPkg::devices > devicesPtr;
typedef boost::shared_ptr< ::NatRosPkg::devices const> devicesConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::NatRosPkg::devices_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::NatRosPkg::devices_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::NatRosPkg::devices_<ContainerAllocator1> & lhs, const ::NatRosPkg::devices_<ContainerAllocator2> & rhs)
{
  return lhs.nDevices == rhs.nDevices &&
    lhs.devices == rhs.devices;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::NatRosPkg::devices_<ContainerAllocator1> & lhs, const ::NatRosPkg::devices_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace NatRosPkg

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::NatRosPkg::devices_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::NatRosPkg::devices_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::NatRosPkg::devices_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::NatRosPkg::devices_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::NatRosPkg::devices_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::NatRosPkg::devices_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::NatRosPkg::devices_<ContainerAllocator> >
{
  static const char* value()
  {
    return "08d9ab4027fd2d063225bde907f29977";
  }

  static const char* value(const ::NatRosPkg::devices_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x08d9ab4027fd2d06ULL;
  static const uint64_t static_value2 = 0x3225bde907f29977ULL;
};

template<class ContainerAllocator>
struct DataType< ::NatRosPkg::devices_<ContainerAllocator> >
{
  static const char* value()
  {
    return "NatRosPkg/devices";
  }

  static const char* value(const ::NatRosPkg::devices_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::NatRosPkg::devices_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 nDevices\n"
"device[] devices \n"
"================================================================================\n"
"MSG: NatRosPkg/device\n"
"int32 id\n"
"int32 nChannels \n"
"int16 params\n"
"channel[] channels\n"
"================================================================================\n"
"MSG: NatRosPkg/channel\n"
"int32 nFrames\n"
"float64[] Values\n"
"bool isEmpty\n"
"bool isPartial\n"
;
  }

  static const char* value(const ::NatRosPkg::devices_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::NatRosPkg::devices_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.nDevices);
      stream.next(m.devices);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct devices_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::NatRosPkg::devices_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::NatRosPkg::devices_<ContainerAllocator>& v)
  {
    s << indent << "nDevices: ";
    Printer<int32_t>::stream(s, indent + "  ", v.nDevices);
    s << indent << "devices[]" << std::endl;
    for (size_t i = 0; i < v.devices.size(); ++i)
    {
      s << indent << "  devices[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::NatRosPkg::device_<ContainerAllocator> >::stream(s, indent + "    ", v.devices[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // NATROSPKG_MESSAGE_DEVICES_H
