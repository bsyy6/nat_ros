// Generated by gencpp from file NatRosPkg/device.msg
// DO NOT EDIT!


#ifndef NATROSPKG_MESSAGE_DEVICE_H
#define NATROSPKG_MESSAGE_DEVICE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <NatRosPkg/channel.h>

namespace NatRosPkg
{
template <class ContainerAllocator>
struct device_
{
  typedef device_<ContainerAllocator> Type;

  device_()
    : id(0)
    , nChannels(0)
    , params(0)
    , channels()  {
    }
  device_(const ContainerAllocator& _alloc)
    : id(0)
    , nChannels(0)
    , params(0)
    , channels(_alloc)  {
  (void)_alloc;
    }



   typedef int32_t _id_type;
  _id_type id;

   typedef int32_t _nChannels_type;
  _nChannels_type nChannels;

   typedef int16_t _params_type;
  _params_type params;

   typedef std::vector< ::NatRosPkg::channel_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::NatRosPkg::channel_<ContainerAllocator> >> _channels_type;
  _channels_type channels;





  typedef boost::shared_ptr< ::NatRosPkg::device_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::NatRosPkg::device_<ContainerAllocator> const> ConstPtr;

}; // struct device_

typedef ::NatRosPkg::device_<std::allocator<void> > device;

typedef boost::shared_ptr< ::NatRosPkg::device > devicePtr;
typedef boost::shared_ptr< ::NatRosPkg::device const> deviceConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::NatRosPkg::device_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::NatRosPkg::device_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::NatRosPkg::device_<ContainerAllocator1> & lhs, const ::NatRosPkg::device_<ContainerAllocator2> & rhs)
{
  return lhs.id == rhs.id &&
    lhs.nChannels == rhs.nChannels &&
    lhs.params == rhs.params &&
    lhs.channels == rhs.channels;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::NatRosPkg::device_<ContainerAllocator1> & lhs, const ::NatRosPkg::device_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace NatRosPkg

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::NatRosPkg::device_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::NatRosPkg::device_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::NatRosPkg::device_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::NatRosPkg::device_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::NatRosPkg::device_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::NatRosPkg::device_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::NatRosPkg::device_<ContainerAllocator> >
{
  static const char* value()
  {
    return "78b6575faa3bd78870aadb6231f51303";
  }

  static const char* value(const ::NatRosPkg::device_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x78b6575faa3bd788ULL;
  static const uint64_t static_value2 = 0x70aadb6231f51303ULL;
};

template<class ContainerAllocator>
struct DataType< ::NatRosPkg::device_<ContainerAllocator> >
{
  static const char* value()
  {
    return "NatRosPkg/device";
  }

  static const char* value(const ::NatRosPkg::device_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::NatRosPkg::device_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 id\n"
"int32 nChannels \n"
"int16 params\n"
"channel[] channels\n"
"================================================================================\n"
"MSG: NatRosPkg/channel\n"
"int32 nFrames\n"
"float64[] Values\n"
"bool isEmpty\n"
"bool isPartial\n"
;
  }

  static const char* value(const ::NatRosPkg::device_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::NatRosPkg::device_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.id);
      stream.next(m.nChannels);
      stream.next(m.params);
      stream.next(m.channels);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct device_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::NatRosPkg::device_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::NatRosPkg::device_<ContainerAllocator>& v)
  {
    s << indent << "id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.id);
    s << indent << "nChannels: ";
    Printer<int32_t>::stream(s, indent + "  ", v.nChannels);
    s << indent << "params: ";
    Printer<int16_t>::stream(s, indent + "  ", v.params);
    s << indent << "channels[]" << std::endl;
    for (size_t i = 0; i < v.channels.size(); ++i)
    {
      s << indent << "  channels[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::NatRosPkg::channel_<ContainerAllocator> >::stream(s, indent + "    ", v.channels[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // NATROSPKG_MESSAGE_DEVICE_H
